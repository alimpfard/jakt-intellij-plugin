{
    parserClass="org.serenityos.jakt.parser.JaktParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jakt"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.serenityos.jakt.JaktTypes"
    elementTypeClass="org.serenityos.jakt.plugin.JaktElement"
    tokenTypeClass="org.serenityos.jakt.plugin.JaktToken"

    parserUtilClass="org.serenityos.jakt.plugin.JaktParserUtil"

    tokens=[
        EXTERN_KEYWORD='extern'

        NAMESPACE_KEYWORD='namespace'
        CLASS_KEYWORD='class'
        STRUCT_KEYWORD='struct'
        ENUM_KEYWORD='enum'
        FUNCTION_KEYWORD='function'
        PUBLIC_KEYWORD='public'
        PRIVATE_KEYWORD='private'

        LET_KEYWORD='let'
        MATCH_KEYWORD='match'
        IF_KEYWORD='if'
        ELSE_KEYWORD='else'

        WHILE_KEYWORD='while'
        LOOP_KEYWORD='loop'
        FOR_KEYWORD='for'
        IN_KEYWORD='in'
        UNSAFE_KEYWORD='unsafe'
        CPP_KEYWORD='cpp'

        RETURN_KEYWORD='return'
        THROW_KEYWORD='throw'
        DEFER_KEYWORD='defer'

        TRUE_KEYWORD='true'
        FALSE_KEYWORD='false'

        REF_KEYWORD='ref'
        MUTABLE_KEYWORD='mutable'
        ANONYMOUS_KEYWORD='anonymous'
        RAW_KEYWORD='raw'
        WEAK_KEYWORD='weak'
        THROWS_KEYWORD='throws'

        SOME_TYPE='Some'
        NONE_TYPE='None'

        PAREN_OPEN='('
        PAREN_CLOSE=')'
        CURLY_OPEN='{'
        CURLY_CLOSE='}'
        BRACKET_OPEN='['
        BRACKET_CLOSE=']'
        COLON=':'
        COLON_COLON='::'
        SEMICOLON=';'
        DOT='.'
        DOT_DOT='..'
        COMMA=','
        EQUALS='='
        DOUBLE_EQUALS='=='
        NOT_EQUALS='!='
        PLUS='+'
        MINUS='-'
        ASTERISK='*'
        SLASH='/'
        PLUS_PLUS='++'
        MINUS_MINUS='--'
        LEFT_SHIFT='<<'
        RIGHT_SHIFT='>>'
        ARITH_LEFT_SHIFT='<<<'
        ARITH_RIGHT_SHIFT='>>>'
        PERCENT='%'
        ARROW='->'
        FAT_ARROW='=>'
        QUESTION_MARK='?'
        DOUBLE_QUESTION_MARK='??'
        EXCLAMATION_POINT='!'
        LESS_THAN='<'
        LESS_THAN_EQUALS='<='
        GREATER_THAN='>'
        GREATER_THAN_EQUALS='>='
        AMPERSAND='&'
        PIPE='|'
        CARET='^'
        TILDE='~'
        AND='and'
        OR='or'
        NOT='not'

        HEX_LITERAL="regexp:(0x|0X)[\dA-Fa-f](_?[\dA-Fa-f])*"
        BINARY_LITERAL="regexp:(0b|0B)[01](_?[01])*"
        DECIMAL_LITERAL="regexp:\d(_?\d)*"

        STRING_LITERAL="regexp:\"([^\"\\]|\\.)*\""
        BYTE_CHAR_LITERAL="regexp:b'([^'\\]|\\.)*'"
        CHAR_LITERAL="regexp:'([^'\\]|\\.)*'"
        IDENTIFIER="regexp:[A-Za-z_]\w*"

        COMMENT="regexp://[^\r\n]*"
        NEWLINE="regexp:[\r\n]"
    ]

    extends(".+BinaryExpression")=BinaryExpression
    extends(".+Expression")=Expression
    extends(".+Statement")=Statement

    name(".+Expression")=expression
    name(".+Statement")=statement

    generateTokenAccessors=true
}

/*************************************
 *               ROOT                *
 *************************************/

File ::= TopLevelDefinitionList?

private TopLevelDefinitionList ::= TopLevelDefinition (StatementSeparator TopLevelDefinition)* {
    recoverWhile=TopLevelDefinition_recover
}

private TopLevelDefinition ::=
      FunctionDeclaration
    | ClassDeclaration
    | StructDeclaration
    | EnumDeclaration
    | NamespaceDeclaration

private TopLevelDefinition_recover ::= !(
      EXTERN_KEYWORD
    | FUNCTION_KEYWORD
    | CLASS_KEYWORD
    | STRUCT_KEYWORD
    | ENUM_KEYWORD
    | REF_KEYWORD
    | !CURLY_CLOSE) // So this won't eat the trailing curly of a namespace

private StatementLead ::=
      EXTERN_KEYWORD
    | CLASS_KEYWORD
    | STRUCT_KEYWORD
    | FUNCTION_KEYWORD
    | LET_KEYWORD
    | WHILE_KEYWORD
    | FOR_KEYWORD
    | LOOP_KEYWORD
    | RETURN_KEYWORD
    | THROW_KEYWORD
    | DEFER_KEYWORD
    | THROWS_KEYWORD
    | SEMICOLON
    | ExpressionLead

private ExpressionLead ::=
      IF_KEYWORD
    | TRUE_KEYWORD
    | FALSE_KEYWORD
    | PAREN_OPEN
    | PAREN_CLOSE
    | CURLY_OPEN
    | CURLY_CLOSE
    | BRACKET_OPEN
    | BRACKET_CLOSE
    | PLUS
    | MINUS
    | EXCLAMATION_POINT
    | STRING_LITERAL
    | CHAR_LITERAL
    | Literal

/*************************************
 *           Declarations            *
 *************************************/

FunctionDeclaration ::= EXTERN_KEYWORD? FUNCTION_KEYWORD IDENTIFIER GenericBounds? PAREN_OPEN ParameterList? PAREN_CLOSE FunctionReturnType? FunctionBody {pin=2}
FunctionReturnType ::= THROWS_KEYWORD? ARROW Type
private FunctionBody ::= Block | FAT_ARROW ExpressionWithoutAssignment
ParameterList ::= <<commaList Parameter>>
Parameter ::= ANONYMOUS_KEYWORD? MUTABLE_KEYWORD? IDENTIFIER TypeAnnotation?

NamespaceDeclaration ::= NAMESPACE_KEYWORD IDENTIFIER CURLY_OPEN NL TopLevelDefinitionList? NL CURLY_CLOSE
ClassDeclaration ::= EXTERN_KEYWORD? CLASS_KEYWORD IDENTIFIER GenericBounds? NL StructBody {pin=2}
StructDeclaration ::= EXTERN_KEYWORD? STRUCT_KEYWORD IDENTIFIER GenericBounds? NL StructBody {pin=2}
StructBody ::= CURLY_OPEN NL StructMembers? NL CURLY_CLOSE

// Structs
private StructMembers ::= <<commaOrEolList StructMember>> {
    pin=1
    recoverWhile=StructMember_recover
}
StructMember ::= StructVisibility? (StructField | FunctionDeclaration)
private StructMember_recover ::= !CURLY_CLOSE | (&MemberSeparator !IDENTIFIER)

StructVisibility ::= PUBLIC_KEYWORD | PRIVATE_KEYWORD
StructField ::= IDENTIFIER MUTABLE_KEYWORD? TypeAnnotation {pin=1}
MemberSeparator ::= COMMA? NEWLINE+ | COMMA {name="comma or newline"}

// Enums
EnumDeclaration ::= EnumHead EnumBody
private EnumHead ::= REF_KEYWORD? ENUM_KEYWORD NL IDENTIFIER NL {pin=2}
private EnumBody ::= UnderlyingTypeEnumBody | NormalEnumBody

UnderlyingTypeEnumBody ::= TypeAnnotation NL CURLY_OPEN NL UnderlyingTypeEnumMembers CURLY_CLOSE {pin=1}

private UnderlyingTypeEnumMembers ::= <<commaOrEolList UnderlyingTypeEnumMember>> {
    recoverWhile=StructMember_recover
}
UnderlyingTypeEnumMember ::= IDENTIFIER [EQUALS Expression]

NormalEnumBody ::= GenericBounds? NL CURLY_OPEN NL NormalEnumMembers CURLY_CLOSE

private NormalEnumMembers ::= <<commaOrEolList NormalEnumMember>> {
    recoverWhile=StructMember_recover
}
private NormalEnumMember ::= IDENTIFIER NormalEnumMemberBody?
private NormalEnumMemberBody ::= PAREN_OPEN NL (TypeEnumMemberBody | StructEnumMemberBody) PAREN_CLOSE
TypeEnumMemberBody ::= <<commaList (Type !COLON)>>
StructEnumMemberBody ::= <<commaOrEolList StructEnumMemberBodyPart>> {
    recoverWhile=StructEnumMemberBodyPart_recover
}
private StructEnumMemberBodyPart_recover ::= !(IDENTIFIER | COMMA | PAREN_CLOSE | NEWLINE)
StructEnumMemberBodyPart ::= IDENTIFIER TypeAnnotation

/*************************************
 *            STATEMENTS             *
 *************************************/

private StatementList ::= Statement (StatementSeparator Statement)* {
    recoverWhile=StatementList_recover
}
private StatementSeparator ::= (NEWLINE | SEMICOLON)+
private StatementList_recover ::= !(CURLY_CLOSE | StatementSeparator | StatementLead)

Statement ::=
      Expression
    | ReturnStatement
    | ThrowStatement
    | DeferStatement
    | IfStatement
    | WhileStatement
    | LoopStatement
    | ForStatement
    | VariableDeclarationStatement
    | UnsafeStatement
    | CppStatement

VariableDeclarationStatement ::= LET_KEYWORD MUTABLE_KEYWORD? IDENTIFIER TypeAnnotation? EQUALS ExpressionWithoutAssignment {pin=1}
IfStatement ::= IF_KEYWORD ExpressionWithoutAssignment Block [ ELSE_KEYWORD Block ]
ReturnStatement ::= RETURN_KEYWORD ExpressionWithoutAssignment?
ThrowStatement ::= THROW_KEYWORD ExpressionWithoutAssignment
DeferStatement ::= DEFER_KEYWORD Statement
WhileStatement ::= WHILE_KEYWORD ExpressionWithoutAssignment Block
LoopStatement ::= LOOP_KEYWORD Block

ForStatement ::= FOR_KEYWORD IDENTIFIER IN_KEYWORD ExpressionWithoutAssignment Block

// TODO: Maybe delegate unsafe checking to plugin analysis for better error messages?
UnsafeStatement ::= UNSAFE_KEYWORD <<withOn Block "UNSAFE">>
CppStatement ::= <<isModeOn "UNSAFE">> CPP_KEYWORD Block

/*************************************
 *               TYPES               *
 *************************************/

Type ::=
      RawType
    | WeakType
    | ArrayType
    | GenericType
    | DictionaryType
    | SetType
    | TupleType
    | PlainType

RawType ::= RAW_KEYWORD Type
WeakType ::= WEAK_KEYWORD Type
PlainType ::= IDENTIFIER [ QUESTION_MARK | EXCLAMATION_POINT ]
GenericType ::= IDENTIFIER GenericBounds
GenericBounds ::= LESS_THAN <<commaOrEolList Type>> GREATER_THAN
ArrayType ::= BRACKET_OPEN IDENTIFIER BRACKET_CLOSE
DictionaryType ::= BRACKET_OPEN Type COLON Type BRACKET_CLOSE
SetType ::= CURLY_OPEN Type CURLY_CLOSE
TupleType ::= PAREN_OPEN <<commaList Type>> PAREN_CLOSE
TypeAnnotation ::= COLON Type

/*************************************
 *            EXPRESSIONS            *
 *************************************/

// TODO: Pretty much every expression can start with an arbitrary amount of newlines
Expression ::=
      OptionalSomeExpression // Must come before CallExpression
    | OptionalNoneExpression // Must come before Qualifier
    | CallExpression // Must come before RelationalBinaryExpression (because of generics)
    | LogicalOrBinaryExpression
    | LogicalAndBinaryExpression
    | BitwiseOrBinaryExpression
    | BitwiseXorBinaryExpression
    | BitwiseAndBinaryExpression
    | RelationalBinaryExpression
    | ShiftBinaryExpression
    | AddBinaryExpression
    | MultiplyBinaryExpression
    | PrefixUnaryExpression
    | PostfixUnaryExpression
    | AssignmentBinaryExpression
    | ParenExpression
    | MemberAccessExpression
    | IndexedAccessExpression
    | RangeExpression
    | ArrayExpression
    | DictionaryExpression
    | SetExpression
    | TupleExpression
    | MatchExpression
    | Literal
    | NamespacedQualifier
    | PlainQualifier
    | Block

private ExpressionWithoutAssignment ::= <<withOn Expression "NO_ASSIGN">> {name="expression"}

OptionalSomeExpression ::= SOME_TYPE PAREN_OPEN ExpressionWithoutAssignment PAREN_CLOSE
OptionalNoneExpression ::= NONE_TYPE

CallExpression ::= Expression GenericBounds? PAREN_OPEN ArgumentList? PAREN_CLOSE {pin=3}
ArgumentList ::= <<commaOrEolList Argument>>
Argument ::= LabeledArgument | UnlabeledArgument
LabeledArgument ::= IDENTIFIER COLON ExpressionWithoutAssignment
UnlabeledArgument ::= ExpressionWithoutAssignment

ParenExpression ::= PAREN_OPEN ExpressionWithoutAssignment PAREN_CLOSE
MemberAccessExpression ::= Expression DOT (IDENTIFIER | DECIMAL_LITERAL)
IndexedAccessExpression ::= Expression BRACKET_OPEN Expression BRACKET_CLOSE
RangeExpression ::= NumericLiteral DOT_DOT NumericLiteral

ArrayExpression ::= BRACKET_OPEN (SizedArrayBody | ElementsArrayBody)? BRACKET_CLOSE
SizedArrayBody ::= ExpressionWithoutAssignment SEMICOLON NumericLiteral
ElementsArrayBody ::= <<commaOrEolList ExpressionWithoutAssignment>>

DictionaryExpression ::= BRACKET_OPEN <<commaOrEolList DictionaryElement>>? BRACKET_CLOSE
DictionaryElement ::= Expression COLON Expression
SetExpression ::= CURLY_OPEN <<commaOrEolList ExpressionWithoutAssignment>>? CURLY_CLOSE
TupleExpression ::= PAREN_OPEN <<commaOrEolList ExpressionWithoutAssignment>> PAREN_CLOSE

MatchExpression ::= MATCH_KEYWORD ExpressionWithoutAssignment NL CURLY_OPEN NL MatchPatterns? NL CURLY_CLOSE
private MatchPatterns ::= <<commaOrEolList MatchPattern>> {
    pin=1
    recoverWhile=MatchPatterns_recover
}
private MatchPatterns_recover ::= !(CURLY_CLOSE | ELSE_KEYWORD | PAREN_OPEN | IDENTIFIER)
MatchPattern ::= PatternHead PatternTrail
PatternTrail ::= FAT_ARROW Expression
PatternHead ::= ELSE_KEYWORD | IdentPatternHead | ExpressionPatternHead
// TODO: This is incomplete
IdentPatternHead ::= (IDENTIFIER | NamespacedQualifier) [PAREN_OPEN <<commaList IDENTIFIER>> PAREN_CLOSE]
ExpressionPatternHead ::= PAREN_OPEN ExpressionWithoutAssignment PAREN_CLOSE

NamespacedQualifier ::= IDENTIFIER (COLON_COLON IDENTIFIER)+ {extends=Expression}
PlainQualifier ::= IDENTIFIER {extends=Expression}

Block ::= CURLY_OPEN NL <<withOff StatementList? "NO_ASSIGN">> NL CURLY_CLOSE {
    pin=1
    extends=Expression
}

/*************************************
 *        BINARY EXPRESSIONS         *
 *************************************/

fake BinaryExpression ::= Expression+ {
    methods=[left="Expression[0]" right="Expression[1]"]
}

LogicalOrBinaryExpression ::= Expression LogicalOrOp NL Expression
LogicalAndBinaryExpression ::= Expression AND NL Expression
BitwiseOrBinaryExpression ::= Expression PIPE NL Expression
BitwiseXorBinaryExpression ::= Expression CARET NL Expression
BitwiseAndBinaryExpression ::= Expression AMPERSAND NL Expression
RelationalBinaryExpression ::= Expression RelationalOp NL Expression
ShiftBinaryExpression ::= Expression ShiftOp NL Expression
AddBinaryExpression ::= Expression AddOp NL Expression
MultiplyBinaryExpression ::= Expression MultiplyOp NL Expression
// TODO: Restrict LHS?
// TODO: Invert Expression{WithoutAssignment} => Expression{WithAssignment}, as this can't be a part
//       of the expression tree root
AssignmentBinaryExpression ::= Expression AssignmentOp NL Expression {rightAssociative=true}
fake UnaryExpression ::= PrefixOp? Expression PostfixOp?
PrefixUnaryExpression ::= PrefixOp NL Expression {extends=UnaryExpression}
PostfixUnaryExpression ::= Expression PostfixOp {extends=UnaryExpression}

private AddOp ::= PLUS | MINUS
private MultiplyOp ::= ASTERISK | SLASH | PERCENT
private ShiftOp ::= ARITH_LEFT_SHIFT | LEFT_SHIFT | ARITH_RIGHT_SHIFT | RIGHT_SHIFT
private RelationalOp ::= LESS_THAN_EQUALS | LESS_THAN | GREATER_THAN_EQUALS | GREATER_THAN | DOUBLE_EQUALS | NOT_EQUALS
private LogicalOrOp ::= OR | DOUBLE_QUESTION_MARK
private AssignmentOp ::= (AddOp | MultiplyOp | ShiftOp)? EQUALS
private PrefixOp ::=
      PLUS_PLUS
    | MINUS_MINUS
    | MINUS
    | NOT
    | TILDE
    | AMPERSAND RAW_KEYWORD
    | <<isModeOn "UNSAFE">> ASTERISK
private PostfixOp ::= PLUS_PLUS | MINUS_MINUS

/*************************************
 *             LITERALS              *
 *************************************/

Literal ::=
      STRING_LITERAL
    | BYTE_CHAR_LITERAL
    | CHAR_LITERAL
    | NumericLiteral
    | BooleanLiteral
    {extends=Expression}

NumericLiteral ::=
      BINARY_LITERAL
    | HEX_LITERAL
    | DECIMAL_LITERAL

BooleanLiteral ::= TRUE_KEYWORD | FALSE_KEYWORD

/*************************************
 *             HELPERS               *
 *************************************/

private NL ::= NEWLINE*
private meta commaList ::= <<p>> (COMMA <<p>>)* COMMA?
private meta commaOrEolList ::= <<p>> (MemberSeparator <<p>>)* MemberSeparator?
