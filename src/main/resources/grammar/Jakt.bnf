{
    parserClass="org.serenityos.jakt.parser.JaktParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jakt"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.serenityos.jakt.JaktTypes"
    elementTypeClass="org.serenityos.jakt.JaktElement"
    tokenTypeClass="org.serenityos.jakt.JaktToken"

    parserUtilClass="org.serenityos.jakt.JaktParserUtil"

    tokens=[
        EXTERN_KEYWORD='extern'

        CLASS_KEYWORD='class'
        STRUCT_KEYWORD='struct'
        FUNCTION_KEYWORD='function'

        LET_KEYWORD='let'

        IF_KEYWORD='if'
        ELSE_KEYWORD='else'

        WHILE_KEYWORD='while'
        FOR_KEYWORD='for'
        LOOP_KEYWORD='loop'

        RETURN_KEYWORD='return'
        THROW_KEYWORD='throw'
        DEFER_KEYWORD='defer'

        TRUE_KEYWORD='true'
        FALSE_KEYWORD='false'

        MUTABLE_KEYWORD='mutable'
        ANONYMOUS_KEYWORD='anonymous'
        RAW_KEYWORD='raw'
        THROWS_KEYWORD='throws'

        PAREN_OPEN='('
        PAREN_CLOSE=')'
        CURLY_OPEN='{'
        CURLY_CLOSE='}'
        BRACKET_OPEN='['
        BRACKET_CLOSE=']'
        COLON=':'
        COLON_COLON='::'
        SEMICOLON=';'
        DOT='.'
        DOT_DOT='..'
        COMMA=','
        EQUALS='='
        DOUBLE_EQUALS='=='
        NOT_EQUALS='!='
        PLUS='+'
        MINUS='-'
        ASTERISK='*'
        SLASH='/'
        LEFT_SHIFT='<<'
        RIGHT_SHIFT='>>'
        ARITH_LEFT_SHIFT='<<<'
        ARITH_RIGHT_SHIFT='>>>'
        PERCENT='%'
        ARROW='->'
        FAT_ARROW='=>'
        QUESTION_MARK='?'
        DOUBLE_QUESTION_MARK='??'
        EXCLAMATION_POINT='!'
        LESS_THAN='<'
        LESS_THAN_EQUALS='<='
        GREATER_THAN='>'
        GREATER_THAN_EQUALS='>='
        AMPERSAND='&'
        PIPE='|'
        CARET='^'
        AND='and'
        OR='or'

        HEX_LITERAL="regexp:(0x|0X)[\dA-Fa-f](_?[\dA-Fa-f])*"
        BINARY_LITERAL="regexp:(0b|0B)[01](_?[01])*"
        DECIMAL_LITERAL="regexp:\d(_?\d)*"

        STRING_LITERAL="regexp:\"([^\"\\]|\\.)*\""
        CHAR_LITERAL="regexp:'([^'\\]|\\.)*'"
        IDENTIFIER="regexp:[A-Za-z_]\w*"

        SPACE="regexp:[ \t\n\x0B\f\r]+"
        COMMENT="regexp://[^\\R]*"
    ]

    extends(".+BinaryExpression")=BinaryExpression
    extends(".+Expression")=Expression
    extends(".+Statement")=Statement
}

File ::= TopLevelDefinition*

private TopLevelDefinition ::=
      ExternFunctionDeclaration
    | ExternStructDeclaration
    | FunctionDeclaration
    | ClassDeclaration
    | StructDeclaration
    {recoverWhile=TopLevelDefinition_recover}

private TopLevelDefinition_recover ::= !(EXTERN_KEYWORD | FUNCTION_KEYWORD | CLASS_KEYWORD | STRUCT_KEYWORD)

Qualifier ::=
      MemberExpression
    | StaticMemberExpression
    | ComputedMemberExpression
    | IDENTIFIER
    {extends=Expression}

Statement ::=
      Expression
    | ReturnStatement
    | ThrowStatement
    | DeferStatement
    | IfStatement
    | WhileStatement
    | LoopStatement
    | ForStatement
    | VariableDeclarationStatement

private StatementLead ::=
      EXTERN_KEYWORD
    | CLASS_KEYWORD
    | STRUCT_KEYWORD
    | FUNCTION_KEYWORD
    | LET_KEYWORD
    | WHILE_KEYWORD
    | FOR_KEYWORD
    | LOOP_KEYWORD
    | RETURN_KEYWORD
    | THROW_KEYWORD
    | DEFER_KEYWORD
    | THROWS_KEYWORD
    | SEMICOLON

private ExpressionLead ::=
      IF_KEYWORD
    | TRUE_KEYWORD
    | FALSE_KEYWORD
    | PAREN_OPEN
    | PAREN_CLOSE
    | CURLY_OPEN
    | CURLY_CLOSE
    | BRACKET_OPEN
    | BRACKET_CLOSE
    | PLUS
    | MINUS
    | EXCLAMATION_POINT
    | STRING_LITERAL
    | CHAR_LITERAL
    | Literal

/*************************************
 *               TYPES               *
 *************************************/

Type ::= ArrayType | GenericType | ( RAW_KEYWORD? IDENTIFIER [ QUESTION_MARK | EXCLAMATION_POINT ] )

GenericType ::= IDENTIFIER LESS_THAN Type GREATER_THAN
ArrayType ::= BRACKET_OPEN IDENTIFIER BRACKET_CLOSE
TypeAnnotation ::= COLON Type

/*************************************
 *           Declarations            *
 *************************************/

FunctionReturnType ::= THROWS_KEYWORD? ARROW Type

ExternFunctionDeclaration ::= EXTERN_KEYWORD FUNCTION_KEYWORD IDENTIFIER PAREN_OPEN ParameterList? PAREN_CLOSE FunctionReturnType?
ExternStructDeclaration ::= EXTERN_KEYWORD STRUCT_KEYWORD IDENTIFIER CURLY_OPEN FieldDeclarationList? CURLY_CLOSE FunctionReturnType?

FunctionDeclaration ::= FUNCTION_KEYWORD IDENTIFIER PAREN_OPEN ParameterList? PAREN_CLOSE FunctionReturnType? ( Block | FAT_ARROW Expression )
ClassDeclaration ::= CLASS_KEYWORD IDENTIFIER CURLY_OPEN ( FunctionDeclaration | FieldDeclaration )* CURLY_CLOSE
StructDeclaration ::= STRUCT_KEYWORD IDENTIFIER CURLY_OPEN FieldDeclaration* CURLY_CLOSE

FieldDeclaration ::= IDENTIFIER TypeAnnotation

/*************************************
 *            STATEMENTS             *
 *************************************/

VariableDeclarationStatement ::= LET_KEYWORD MUTABLE_KEYWORD? IDENTIFIER TypeAnnotation? EQUALS Expression
IfStatement ::= IF_KEYWORD Expression Block [ ELSE_KEYWORD Block ]
ReturnStatement ::= RETURN_KEYWORD Expression?
ThrowStatement ::= THROW_KEYWORD Expression
DeferStatement ::= DEFER_KEYWORD Statement
WhileStatement ::= WHILE_KEYWORD Expression Block
LoopStatement ::= LOOP_KEYWORD Block

// FIXME: Properly implement for loop
ForStatement ::= FOR_KEYWORD Expression Statement

// Parameters
ParameterList ::= <<list Parameter>>
Parameter ::= ANONYMOUS_KEYWORD? MUTABLE_KEYWORD? IDENTIFIER TypeAnnotation?

// Arguments
ArgumentList ::= <<list Argument>>
Argument ::= LabeledArgument | UnlabeledArgument

LabeledArgument ::= IDENTIFIER COLON Expression
UnlabeledArgument ::= Expression

/*************************************
 *            EXPRESSIONS            *
 *************************************/

Expression ::=
      LogicalOrBinaryExpression
    | LogicalAndBinaryExpression
    | BitwiseOrBinaryExpression
    | BitwiseXorBinaryExpression
    | BitwiseAndBinaryExpression
    | RelationalBinaryExpression
    | ShiftBinaryExpression
    | AddBinaryExpression
    | MultiplyBinaryExpression
    | AssignmentBinaryExpression
    | ParenExpression
    | CallExpression
    | RangeExpression
    | Literal
    | Qualifier
    | Block

MemberExpression ::= IDENTIFIER DOT IDENTIFIER
StaticMemberExpression ::= IDENTIFIER COLON_COLON IDENTIFIER
ComputedMemberExpression ::= IDENTIFIER BRACKET_OPEN Expression BRACKET_CLOSE
CallExpression ::= Qualifier PAREN_OPEN ArgumentList? PAREN_CLOSE
RangeExpression ::= NumericLiteral DOT_DOT NumericLiteral
ParenExpression ::= PAREN_OPEN <<enterMode "PAREN">> Expression <<exitMode "PAREN">> PAREN_CLOSE

fake BinaryExpression ::= Expression+ {
    methods=[left="Expression[0]" right="Expression[1]"]
}

LogicalOrBinaryExpression ::= Expression LogicalOrOp Expression
LogicalAndBinaryExpression ::= Expression AND Expression
BitwiseOrBinaryExpression ::= Expression PIPE Expression
BitwiseXorBinaryExpression ::= Expression CARET Expression
BitwiseAndBinaryExpression ::= Expression AMPERSAND Expression
RelationalBinaryExpression ::= Expression RelationalOp Expression
ShiftBinaryExpression ::= Expression ShiftOp Expression
AddBinaryExpression ::= Expression AddOp Expression
MultiplyBinaryExpression ::= Expression MultiplyOp Expression
AssignmentBinaryExpression ::= <<isModeOff "PAREN">> Qualifier AssignmentOp Expression {rightAssociative=true}

private AddOp ::= PLUS | MINUS
private MultiplyOp ::= ASTERISK | SLASH | PERCENT
private ShiftOp ::= ARITH_LEFT_SHIFT | LEFT_SHIFT | ARITH_RIGHT_SHIFT | RIGHT_SHIFT
private RelationalOp ::= LESS_THAN_EQUALS | LESS_THAN | GREATER_THAN_EQUALS | GREATER_THAN | DOUBLE_EQUALS | NOT_EQUALS
private LogicalOrOp ::= OR | DOUBLE_QUESTION_MARK
private AssignmentOp ::= (AddOp | MultiplyOp | ShiftOp)? EQUALS

Block ::= CURLY_OPEN <<withOff BlockElement* "PAREN">> CURLY_CLOSE {pin(".*")=1 extends=Expression}
private BlockElement ::= !CURLY_CLOSE Statement {recoverWhile=BlockElement_recover}
// TODO: Include newlines?
private BlockElement_recover ::= !(CURLY_CLOSE | ';' | <<eof>> | ExpressionLead | StatementLead)

// Literals
Literal ::=
      STRING_LITERAL
    | CHAR_LITERAL
    | NumericLiteral
    | BooleanLiteral
    {extends=Expression}

BooleanLiteral ::= TRUE_KEYWORD | FALSE_KEYWORD

NumericLiteral ::=
      BINARY_LITERAL
    | HEX_LITERAL
    | DECIMAL_LITERAL

// Helpers
private meta list ::= <<p>> (COMMA <<p>>) *
